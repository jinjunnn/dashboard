# 股票分析与交易系统 - 开发规范

## 🎯 项目概览

你是帮助用户开发Next.js股票分析与交易系统的AI助手。
- **技术栈**: Next.js 15, TypeScript, Tailwind CSS, Supabase
- **主要功能**: 股票信号分析、交易仪表板、用户管理
- **开发语言**: 中文

**⚠️ 强制规则：每次代码修改完成后，必须执行[完成后检查清单](#完成后强制检查清单)，违反此规则将被视为工作流程缺陷！**

## 📚 完整规范文档导航

**⚡ 快速开始指南:**
- **[前端开发指南](mdc:.cursor/rules/frontend_development_guide.mdc)** - 前端特有的开发流程和测试规范
- **[文档生成指南](mdc:.cursor/rules/docs_generation_guide.mdc)** - 自动生成.md文档到docs目录的规范
- **[完整规则导航](mdc:.cursor/rules/help.mdc)** - 所有规则文档的详细导航

**🏗️ 核心开发规范:**
- **[项目结构规范](mdc:.cursor/rules/project_structure.mdc)** - 目录组织、文件命名、扩展规则
- **[开发工作流程](mdc:.cursor/rules/development_workflow.mdc)** - 完整开发流程、检查清单、提交规范
- **[前端UI规范](mdc:.cursor/rules/frontend_ui.mdc)** - 设计系统、组件使用、响应式设计
- **[后端API规范](mdc:.cursor/rules/backend_api.mdc)** - Supabase集成、数据访问、权限控制

**🗄️ 数据与配置:**
- **[数据库Schema](mdc:.cursor/rules/database_schema.mdc)** - 数据库表结构定义
- **[API密钥配置](mdc:.cursor/rules/apikeys.mdc)** - 环境变量配置说明

**🧠 智能助手管理:**
- **[记忆管理规则](mdc:.cursor/rules/memory_management.mdc)** - AI记忆生成、更新、删除的完整规范

### 核心用户规则
- **响应语言**: 始终使用中文回复
- **最小化修改**: 代码修改必须最小化，不允许增加不必要的方法
- **依赖管理**: 未经允许不得随意修改环境依赖

## ⚡ 简化开发流程

### 🚀 开发前准备（30秒）
```bash
# 环境检查
npm run dev  # 确保开发服务器正常
npm run type-check  # 确保TypeScript无错误
```

### 🔄 开发过程规范
- **编码规范** - 遵循TypeScript和React最佳实践
- **组件设计** - 优先使用现有shadcn/ui组件，必要时扩展
- **错误处理** - 实现完善的错误边界和异常处理  
- **性能考虑** - 使用适当的优化策略(React.memo、懒加载等)

## ✅ 完成后强制检查清单

### 🔴 功能验证 (必须执行)
```bash
# TypeScript编译检查
npm run type-check
# ESLint代码规范检查
npm run lint  
# 构建验证
npm run build
```

### 🔴 前端特有测试 (必须执行)
- [ ] **页面路由测试** - 手动验证所有修改的路由可访问
- [ ] **响应式测试** - 检查移动端和桌面端显示正常
- [ ] **交互测试** - 验证按钮、表单、导航功能正常
- [ ] **数据加载测试** - 确认API数据正确显示和错误处理
- [ ] **浏览器控制台检查** - 确保无运行时错误和警告

### 🔴 开发服务器状态检查 (必须执行)
- [ ] **终端输出检查** - 如果 `npm run dev` 正在运行，必须检查终端输出
- [ ] **构建状态确认** - 确保所有页面编译成功，无编译错误
- [ ] **网络请求验证** - 验证API请求正常，无连接失败

> **⚠️ 重要：发现任何错误、警告或异常必须立即修复，不得跳过！**

### 🔴 兼容性和性能 (必须执行)
- [ ] **向后兼容** - 确认变更不会破坏现有功能
- [ ] **依赖检查** - 确认未引入未声明的依赖
- [ ] **性能影响** - 检查构建大小和首屏加载时间
- [ ] **SEO和可访问性** - 确保页面有适当的标题和语义化标签

### 🔴 文档和版本管理 (必须执行)
- [ ] **changelog.md更新** - AI助手总结变更并更新版本记录
- [ ] **版本号管理** - 使用语义化版本号格式 [x.x.x]
- [ ] **文档生成** - 根据[文档生成指南](mdc:.cursor/rules/docs_generation_guide.mdc)生成相应文档到docs/目录
- [ ] **代码注释** - 为复杂逻辑添加必要注释
- [ ] **类型定义** - 确保TypeScript类型定义完整

### 🔴 特殊配置更新 (如适用)
- [ ] **信号配置更新** - 如果涉及信号类型变更，检查并更新signals-config.ts
- [ ] **环境变量检查** - 确认所需环境变量已正确配置

## 🚨 前端特有注意事项

### Next.js特定规范
- **页面路由** - 使用App Router约定，正确组织(main)/(external)路由组
- **服务端组件** - 优先使用Server Components，客户端组件标记'use client'
- **静态生成** - 合理使用SSG/ISR提升性能
- **图片优化** - 使用Next.js Image组件

### React最佳实践  
- **Hooks依赖** - useEffect依赖项必须完整准确
- **状态管理** - 避免不必要的状态提升，使用适当的状态管理
- **性能优化** - 合理使用React.memo、useMemo、useCallback
- **错误边界** - 重要组件添加错误边界处理

### Tailwind CSS规范
- **响应式设计** - 使用sm/md/lg/xl断点前缀
- **设计系统** - 优先使用shadcn/ui组件的预设样式
- **避免内联样式** - 使用Tailwind类名而非style属性

## 📊 错误处理和性能监控

### 常见前端错误
1. **Hydration错误** - 服务端客户端渲染不一致
2. **路由错误** - 动态路由参数问题  
3. **状态管理错误** - useEffect无限循环
4. **样式冲突** - Tailwind类名覆盖问题

### 错误排查命令
```bash
# 清理缓存重新构建
rm -rf .next && npm run dev
# 检查TypeScript错误
npm run type-check
# 检查ESLint问题  
npm run lint --fix
```

---

## 🚨 重要提醒

**每次代码修改完成后，必须逐项检查上述[完成后强制检查清单](#完成后强制检查清单)！**

**前端开发必须关注用户体验，任何影响加载性能、交互体验、视觉一致性的问题都必须立即修复！**

**如需详细开发规范，请查看对应的规则文档链接！** 