# 文档生成指南

## 🎯 文档管理原则

### 📁 文档目录结构
```
docs/
├── api/                    # API文档
│   ├── endpoints/         # API端点文档
│   ├── schemas/           # 数据结构文档  
│   └── authentication/   # 认证相关文档
├── development/           # 开发文档
│   ├── setup/            # 环境搭建
│   ├── guidelines/       # 开发指南
│   └── troubleshooting/  # 问题排查
├── deployment/           # 部署文档
│   ├── docker/           # Docker部署
│   ├── production/       # 生产环境
│   └── monitoring/       # 监控配置
├── architecture/         # 架构文档
│   ├── database/         # 数据库设计
│   ├── frontend/         # 前端架构
│   └── backend/          # 后端架构
└── user-guides/          # 用户指南
    ├── features/         # 功能说明
    └── tutorials/        # 使用教程
```

## ⚡ 自动文档生成

### 🤖 AI助手生成规范

#### 何时生成文档
1. **API变更时** - 新增/修改API端点
2. **架构变更时** - 数据库schema、组件结构变更
3. **功能完成时** - 新功能开发完成
4. **部署配置变更时** - Docker、环境配置变更
5. **用户明确请求时** - 用户要求生成特定文档

#### 文档生成流程
```bash
# 1. 分析变更内容
# AI助手分析代码变更和功能实现

# 2. 确定文档类型和位置
# 根据变更内容决定生成哪类文档

# 3. 生成文档内容
# 使用标准模板生成结构化文档

# 4. 保存到指定位置  
# 按照目录规范保存到docs/对应子目录
```

### 📝 文档生成模板

#### API文档模板
```markdown
# API名称

## 概述
简要描述API的功能和用途

## 端点信息
- **URL**: `/api/endpoint`
- **方法**: GET/POST/PUT/DELETE
- **认证**: 是否需要认证

## 请求参数
| 参数名 | 类型 | 必需 | 说明 |
|--------|------|------|------|
| param1 | string | 是 | 参数说明 |

## 响应格式
```json
{
  "status": "success",
  "data": {}
}
```

## 错误码
| 错误码 | 说明 |
|--------|------|
| 400 | 请求参数错误 |

## 示例
请求示例和响应示例
```

#### 功能文档模板
```markdown
# 功能名称

## 功能概述
功能的主要用途和价值

## 使用场景
什么情况下使用这个功能

## 操作步骤
1. 第一步操作
2. 第二步操作
3. 第三步操作

## 注意事项
使用时需要注意的问题

## 相关功能
关联的其他功能或页面
```

#### 架构文档模板
```markdown
# 架构名称

## 设计目标
架构设计要解决的问题

## 核心组件
- 组件1: 功能说明
- 组件2: 功能说明

## 数据流
描述数据在系统中的流转

## 技术选型
使用的技术和理由

## 部署架构
生产环境的部署方式
```

## 🔄 文档维护规范

### 📋 文档更新检查清单
- [ ] **内容准确性** - 文档内容与实际代码一致
- [ ] **格式规范** - 使用标准Markdown格式
- [ ] **链接有效性** - 内部链接可以正常访问
- [ ] **图片资源** - 图片文件存在且可访问
- [ ] **版本信息** - 包含最后更新时间和版本号

### 🏷️ 文档元信息规范
```markdown
---
title: 文档标题
description: 文档简要描述
version: 1.0.0
last_updated: 2024-01-01
tags: [api, frontend, database]
---
```

### 🔗 文档间链接规范
```markdown
# 相对路径链接（推荐）
[API文档](../api/endpoints/signals-api.md)

# 绝对路径链接（避免）
[API文档](/docs/api/endpoints/signals-api.md)
```

## 🚨 文档生成规则

### ✅ 应该生成文档的情况
1. **新增API端点** → 生成API文档到 `docs/api/endpoints/`
2. **数据库schema变更** → 更新 `docs/architecture/database/`
3. **新增前端页面/组件** → 生成组件文档到 `docs/development/`
4. **部署配置变更** → 更新 `docs/deployment/`
5. **用户功能完成** → 生成用户指南到 `docs/user-guides/`

### ❌ 不应该生成文档的情况
1. **简单Bug修复** - 除非修复涉及重要行为变更
2. **代码重构** - 除非架构有重大变化
3. **样式调整** - 除非是设计系统变更
4. **临时调试代码** - 临时性质的代码变更

### 🔄 文档更新策略
```markdown
# 增量更新 - 在现有文档基础上增加内容
+ 新增的功能说明
+ 新增的API端点

# 覆盖更新 - 完全重写文档内容  
完全替换原有内容

# 版本控制 - 保留历史版本
备份旧版本到 `docs/archive/`
```

## 📊 文档质量控制

### 📝 文档审查标准
1. **完整性** - 覆盖所有必要信息
2. **准确性** - 内容与实际实现一致
3. **可读性** - 结构清晰，表达明确
4. **实用性** - 读者能够根据文档完成任务
5. **时效性** - 内容是最新的

### 🔍 自动检查
```bash
# 检查markdown语法
markdownlint docs/**/*.md

# 检查链接有效性  
markdown-link-check docs/**/*.md

# 检查图片资源
find docs -name "*.md" -exec grep -l "!\[.*\]" {} \;
```

---

## 🚨 重要提醒

**AI助手在生成文档时必须遵循：**
1. **分析先行** - 先分析变更内容，确定需要生成的文档类型
2. **位置准确** - 按照目录规范保存到正确位置
3. **内容完整** - 使用标准模板，确保信息完整
4. **格式规范** - 遵循Markdown标准和项目约定
5. **链接正确** - 确保所有链接可以正常访问

**用户如果发现文档错误或不完整，应立即反馈给AI助手进行修正！**
description:
globs:
alwaysApply: false
---
