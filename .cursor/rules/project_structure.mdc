---
description: 
globs: 
alwaysApply: false
---
# 项目结构规范

## 📁 目录结构说明

### 应用路由结构 (`src/app/`)
```
src/app/
├── (main)/                 # 主应用路由组 - 需要认证
│   ├── dashboard/         # 主仪表板
│   │   ├── _components/   # 仪表板专用组件
│   │   ├── layout.tsx     # 仪表板布局
│   │   └── page.tsx       # 仪表板主页
│   ├── signals/           # 信号分析模块
│   │   ├── _components/   # 信号分析组件
│   │   ├── daily/         # 日线信号页面
│   │   ├── intraday/      # 分时信号页面
│   │   ├── layout.tsx     # 信号模块布局
│   │   └── page.tsx       # 信号模块主页
│   ├── analysis/          # 分析模块 ⭐ 已集成
│   │   ├── dashboard/     # 分析仪表板
│   │   ├── overview/      # 分析概览
│   │   └── layout.tsx     # 分析模块布局
│   └── stocks/            # 股票模块 ⭐ 新增
│       ├── [symbol]/      # 动态股票详情页面
│       │   └── page.tsx   # 股票详情页
│       └── layout.tsx     # 股票模块布局
├── (external)/            # 外部访问页面 - 无需认证
│   └── page.tsx          # 外部主页
├── auth/                  # 认证相关页面
│   └── v1/               # 认证v1版本
│       ├── login/        # 登录页面
│       └── register/     # 注册页面
├── layout.tsx            # 根布局
├── globals.css           # 全局样式
└── favicon.ico           # 网站图标
```

### 组件结构 (`src/components/`)
```
src/components/
├── ui/                   # shadcn/ui 基础组件
│   ├── button.tsx       # 按钮组件
│   ├── input.tsx        # 输入框组件
│   ├── table.tsx        # 表格组件
│   └── ...              # 其他UI组件
├── data-table/          # 数据表格专用组件
│   ├── data-table.tsx   # 主表格组件
│   ├── columns.tsx      # 表格列定义
│   └── ...              # 表格相关工具
├── search/              # 搜索功能组件 ⭐ 新增
│   └── enhanced-search-dialog.tsx # 增强搜索对话框
└── signals/             # 信号相关组件
    ├── signal-stats-card.tsx      # 信号统计卡片
    └── signals-table.tsx          # 信号表格组件
```

### 工具库结构 (`src/lib/`)
```
src/lib/
├── supabase/            # Supabase相关
│   └── server.ts        # 服务端客户端
├── services/            # 业务服务层 ⭐ 新增
│   ├── signals-service.ts    # 信号查询服务
│   └── search-service.ts     # 搜索服务
├── utils.ts             # 通用工具函数
└── layout-preferences.ts # 布局偏好设置
```

### 配置文件结构 (`src/config/`)
```
src/config/
├── app-config.ts        # 应用全局配置
└── signals-config.ts    # 信号类型配置 ⭐ 新增
```

#### 信号配置说明
`signals-config.ts` 文件用于管理不同时间框架下的信号类型：

**核心功能：**
- 定义日内（intraday）和日线（daily）信号的不同名称
- 配置信号的显示名称、颜色、图标等UI属性
- 提供信号启用/禁用控制
- 支持信号类型映射和查询功能

**使用场景：**
- 左侧导航栏的信号类型下拉菜单
- 信号查询和筛选功能
- 信号展示的UI配置

## 📋 文件命名规范

### 页面文件
- **页面组件**: `page.tsx` - Next.js约定的页面文件
- **布局组件**: `layout.tsx` - Next.js约定的布局文件
- **私有组件**: `_components/` - 下划线前缀表示私有目录

### 组件文件
- **UI组件**: `kebab-case.tsx` - 如 `data-table.tsx`
- **页面组件**: `PascalCase.tsx` - 如 `LoginForm.tsx`
- **工具文件**: `kebab-case.ts` - 如 `table-utils.ts`

### 目录命名
- **路由组**: `(group-name)/` - 括号包围的路由组
- **私有目录**: `_private/` - 下划线前缀
- **常规目录**: `kebab-case/` - 短横线分隔

## 🚀 扩展规则

### 添加新页面
1. 确定页面属于哪个路由组 (`(main)` 或 `(external)`)
2. 在对应目录下创建 `page.tsx`
3. 如需专用组件，创建 `_components/` 目录
4. 如需特殊布局，创建 `layout.tsx`

### 添加新组件
1. **UI组件** → `src/components/ui/`
2. **业务组件** → 对应功能模块的 `_components/`
3. **通用组件** → `src/components/`

### 添加工具函数
1. **通用工具** → `src/lib/utils.ts`
2. **专用工具** → 对应功能模块下创建工具文件
3. **第三方集成** → `src/lib/` 下创建专门目录

### 添加配置项
1. **应用配置** → `src/config/app-config.ts`
2. **信号配置** → `src/config/signals-config.ts`
3. **新增配置类型** → 在对应配置文件中添加类型定义和导出函数

#### 信号配置修改指南
```typescript
// 1. 修改信号配置
export const intradaySignals: SignalConfig[] = [
  {
    id: 'new_signal_id',
    name: 'NEW_SIGNAL',           // 数据库中的信号类型名称
    displayName: '新信号类型',    // UI显示名称
    description: '信号描述',
    category: 'intraday',
    enabled: true,                // 是否启用
    color: '#color',             // 显示颜色
    icon: 'IconName'             // 图标名称
  }
]

// 2. 更新类型映射（如果需要）
export const signalTypeMapping: Record<string, string> = {
  'NEW_SIGNAL': 'new_signal_id'
}
```

## 🔍 搜索功能架构

### 统一搜索系统 ⭐ 详见 [搜索系统规范](mdc:.cursor/rules/search-system.mdc)
**位置**: 顶部header搜索栏 (layout.tsx)
**组件**: `EnhancedSearchDialog`
**触发**: 回车键搜索，`Cmd/Ctrl + J` 快捷键

**核心特性:**
1. **回车触发**: 输入完成后按回车键触发搜索
2. **状态重置**: 对话框打开时重置所有状态
3. **即时显示**: 搜索结果立即在当前对话框中显示
4. **智能路由**: 股票/信号智能跳转到对应页面

**实现架构:**
```
用户输入 → 回车触发 → 客户端服务 → API路由 → 服务端服务 → 结果显示
```

### 搜索服务层
**文件**: `src/lib/services/search-service.ts`
**功能**:
- 股票代码标准化 (0/3开头→SZ., 6开头→SH.)
- 并行数据库查询
- 智能类型识别
- 错误处理与降级

## 🎨 主题系统修复

### Hydration错误解决方案
**问题**: 服务端和客户端渲染不匹配
**解决**: 使用 `mounted` 状态确保客户端渲染一致性

```typescript
// ThemeSwitcher 修复模式
const [mounted, setMounted] = useState(false);
useEffect(() => setMounted(true), []);

if (!mounted) {
  return <Button size="icon" disabled><Sun /></Button>;
}
```

**修复文件**:
- `src/app/(main)/dashboard/_components/sidebar/theme-switcher.tsx`
- `src/app/(main)/signals/_components/sidebar/theme-switcher.tsx`

## 📝 配置更新记录

### 应用配置更新
**文件**: `src/config/app-config.ts`
- 应用名称: `Studio Admin` → `TIDE AIGO LABS`
- 标题: 更新为 `量化交易系统`
- 描述: 更新为中文描述

### 新增路由配置
- `/analysis/*` - 分析模块 (已有layout)
- `/stocks/[symbol]` - 股票详情页面 (新增)
- 搜索功能集成到所有layout的header中
