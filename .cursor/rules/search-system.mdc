---
description:
globs:
alwaysApply: false
---
# 搜索系统规范

## 概述

搜索系统提供统一的股票和信号搜索功能，支持回车键触发搜索，结果实时显示在搜索对话框中。

## 核心特性

### 1. 搜索触发机制
- **触发方式**: 回车键触发搜索（不是实时搜索）
- **快捷键**: `Cmd/Ctrl + J` 打开搜索对话框
- **状态管理**: 对话框打开时重置所有状态
- **结果显示**: 搜索结果立即在当前对话框中显示

### 2. 搜索类型支持

#### 股票搜索
- **搜索条件**: 包含中文字符或0/3/6开头的6位数字
- **代码标准化**: 
  - 0/3开头 → `SZ.` 前缀
  - 6开头 → `SH.` 前缀
- **结果跳转**: `/stocks/{symbol}`

#### 信号搜索  
- **搜索条件**: 纯数字（信号ID）
- **结果跳转**: `/signals/{category}/{signalType}/{id}`

### 3. 用户界面状态

#### 初始状态（未搜索）
```typescript
!hasSearched ? (
  <div className="flex flex-col items-center justify-center py-8 gap-2">
    <Search className="h-8 w-8 text-muted-foreground/50" />
    <div className="text-sm text-muted-foreground">输入关键词后按回车开始搜索</div>
    <div className="text-xs text-muted-foreground/70">支持中文名称、股票代码、信号ID等</div>
  </div>
)
```

#### 加载状态
```typescript
isLoading ? (
  <div className="flex flex-col items-center justify-center py-8 gap-3">
    <Loader2 className="h-6 w-6 animate-spin text-primary" />
    <div className="text-sm text-muted-foreground">正在搜索...</div>
  </div>
)
```

#### 无结果状态
```typescript
!hasResults ? (
  <CommandEmpty>
    <div className="flex flex-col items-center justify-center py-6 gap-2">
      <Search className="h-6 w-6 text-muted-foreground/50" />
      <div className="text-sm text-muted-foreground">未找到相关结果</div>
      <div className="text-xs text-muted-foreground/70">请尝试其他关键词</div>
    </div>
  </CommandEmpty>
)
```

## 技术实现

### 1. 核心组件
**文件**: `src/components/search/enhanced-search-dialog.tsx`

**关键状态**:
```typescript
const [open, setOpen] = useState(false);           // 对话框开关
const [query, setQuery] = useState("");            // 搜索查询
const [searchResults, setSearchResults] = useState<SearchResponse>({ stocks: [], signals: [] });
const [isLoading, setIsLoading] = useState(false); // 加载状态
const [hasSearched, setHasSearched] = useState(false); // 是否已搜索
```

**状态重置**:
```typescript
// 对话框打开时重置所有状态
useEffect(() => {
  if (open) {
    setQuery("");
    setSearchResults({ stocks: [], signals: [] });
    setIsLoading(false);
    setHasSearched(false);
  }
}, [open]);
```

**搜索执行**:
```typescript
// 回车键触发搜索
const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
  if (e.key === "Enter") {
    e.preventDefault();
    performSearch(query);
  }
}, [query, performSearch]);
```

### 2. 搜索服务层

#### 客户端服务
**文件**: `src/lib/services/search-service-client.ts`
**功能**: 调用搜索API，处理客户端搜索逻辑

#### API路由
**文件**: `src/app/api/search/route.ts`
**功能**: 服务端搜索接口，连接Supabase数据库

#### 服务端服务
**文件**: `src/lib/services/search-service.ts`
**功能**: 核心搜索逻辑，数据库查询和结果处理

### 3. 数据流架构

```
用户输入 → 回车触发 → 客户端服务 → API路由 → 服务端服务 → Supabase → 结果返回 → 界面显示
```

#### 搜索判断逻辑
```typescript
// 股票搜索：包含中文或特定格式的数字
function isStockSearch(input: string): boolean {
  return /[\u4e00-\u9fa5]/.test(input) || 
         /^[036]\d{5}$/.test(input.replace(/^(SZ\.|SH\.)/, ''));
}

// 信号搜索：纯数字
function isSignalSearch(input: string): boolean {
  return /^\d+$/.test(input);
}
```

#### 股票代码标准化
```typescript
function normalizeStockCode(input: string): string {
  const cleanCode = input.replace(/^(SZ\.|SH\.)/, '');
  if (!/^\d{6}$/.test(cleanCode)) return input;
  
  if (cleanCode.startsWith('0') || cleanCode.startsWith('3')) {
    return `SZ.${cleanCode}`;
  } else if (cleanCode.startsWith('6')) {
    return `SH.${cleanCode}`;
  }
  return input;
}
```

## 集成位置

### 1. 布局集成
- **Dashboard布局**: `src/app/(main)/dashboard/layout.tsx`
- **Signals布局**: `src/app/(main)/signals/layout.tsx`
- **位置**: Header区域，与其他导航元素并列

### 2. 页面路由
- **股票页面**: `/stocks/[symbol]` - 显示股票详情和相关信号
- **信号页面**: `/signals/{category}/{signalType}/{id}` - 信号详情页面

## 环境配置

### 1. 环境变量要求
```bash
# 服务端（.env.local）
SUPABASE_URL=your_supabase_url
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key

# 客户端（.env.local）  
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
```

### 2. 数据库依赖
- **stock表**: symbol, name, market, meta_data, updated_at
- **signals表**: id, symbol, signal_type, category, direction, confidence, status, created_at

## 错误处理

### 1. 搜索失败
- 网络错误时返回空结果
- 显示友好的错误提示
- 不影响用户继续使用其他功能

### 2. 路由跳转
- 信号类型映射失败时使用备用路由
- 股票不存在时跳转到404页面
- URL编码处理特殊字符

## 开发规范

### 1. 状态管理原则
- 对话框打开时必须重置所有状态
- 使用 `hasSearched` 区分未搜索和无结果状态
- 搜索状态变更要及时反映到UI

### 2. 用户体验要求
- 回车键触发搜索，不是实时搜索
- 搜索结果必须在当前对话框中显示
- 提供清晰的状态指示和操作提示

### 3. 代码组织
- 搜索相关组件放在 `src/components/search/`
- 搜索服务放在 `src/lib/services/`
- API路由放在 `src/app/api/search/`

## 测试要点

### 1. 功能测试
- 回车键触发搜索
- 搜索结果立即显示
- 对话框重新打开时状态正确重置
- 路由跳转正确

### 2. 用户体验测试
- 状态提示清晰
- 加载状态显示正确
- 无结果时提示友好
- 快捷键功能正常

### 3. 边界情况
- 空查询处理
- 网络错误处理
- 特殊字符处理
- 长查询处理

