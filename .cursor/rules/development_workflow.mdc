---
description: 
globs: 
alwaysApply: false
---
# 开发工作流程规范

## 🚀 完整开发流程

### 1️⃣ 任务准备阶段

#### 需求分析
- [ ] **理解需求** - 仔细阅读需求描述，明确功能边界
- [ ] **技术评估** - 评估实现难度和所需资源
- [ ] **方案设计** - 设计组件结构和数据流
- [ ] **验收标准** - 明确功能完成的判断标准

#### 环境检查
```bash
# 检查开发环境
npm run dev    # 确保项目能正常启动
npm run lint   # 检查代码规范
npm run type-check # 检查TypeScript类型
```

#### 依赖评估
- [ ] **现有组件** - 检查是否可复用现有UI组件
- [ ] **数据结构** - 确认数据库schema是否满足需求
- [ ] **API接口** - 确认所需的数据接口是否存在

### 2️⃣ 开发实施阶段

#### 编码规范
```typescript
// 1. 导入顺序规范
import React from 'react'              // React相关
import { NextPage } from 'next'         // Next.js相关
import { Button } from '@/components/ui' // 项目组件
import { cn } from '@/lib/utils'        // 工具函数

// 2. 组件结构规范
interface ComponentProps {
  // 类型定义在前
}

export function Component({ ...props }: ComponentProps) {
  // Hooks声明
  const [state, setState] = useState()
  
  // 事件处理函数
  const handleEvent = useCallback(() => {
    // 事件逻辑
  }, [])
  
  // 条件渲染判断
  if (loading) return <div>加载中...</div>
  
  // 主要渲染逻辑
  return (
    <div className={cn("base-classes", className)}>
      {/* JSX内容 */}
    </div>
  )
}
```

#### 错误处理策略
```typescript
// 1. 组件级错误边界
function ComponentWithError() {
  try {
    // 组件逻辑
  } catch (error) {
    console.error('组件错误:', error)
    return <div>组件加载失败</div>
  }
}

// 2. 异步操作错误处理
async function fetchData() {
  try {
    const data = await api.getData()
    return data
  } catch (error) {
    toast.error('数据加载失败')
    throw error
  }
}

// 3. 表单验证错误处理
const form = useForm({
  onError: (errors) => {
    Object.entries(errors).forEach(([field, error]) => {
      toast.error(`${field}: ${error.message}`)
    })
  }
})
```

#### 性能优化
```typescript
// 1. 组件性能优化
const MemoizedComponent = memo(Component, (prevProps, nextProps) => {
  return prevProps.data.id === nextProps.data.id
})

// 2. 计算缓存
const expensiveValue = useMemo(() => {
  return computeExpensiveValue(data)
}, [data])

// 3. 回调函数优化
const handleClick = useCallback((id: string) => {
  setSelected(id)
}, [])

// 4. 懒加载
const LazyComponent = lazy(() => import('./LazyComponent'))
```

### 3️⃣ 测试验证阶段

#### 功能测试清单
- [ ] **基础功能** - 验证核心功能正常工作
- [ ] **边界情况** - 测试异常输入和边界值
- [ ] **错误处理** - 确认错误情况得到正确处理
- [ ] **性能表现** - 检查加载速度和响应性

#### 兼容性测试
- [ ] **浏览器兼容** - 测试主流浏览器支持
- [ ] **响应式设计** - 验证不同屏幕尺寸下的表现
- [ ] **深色模式** - 确保主题切换正常
- [ ] **无障碍性** - 检查键盘导航和屏幕阅读器支持

#### 代码质量检查
```bash
# 自动化检查命令
npm run lint          # ESLint检查
npm run type-check    # TypeScript类型检查
npm run format        # Prettier格式化
npm run build         # 构建检查
```

### 4️⃣ 完成提交阶段

#### 必须执行的检查清单

##### 🔴 代码质量检查 (强制)
- [ ] **语法检查** - `npm run lint` 通过，无编译错误
- [ ] **类型检查** - TypeScript类型定义完整，无类型错误
- [ ] **构建验证** - `npm run build` 成功，无构建错误
- [ ] **导入检查** - 确认所有导入语句正确，无循环依赖

##### 🔴 功能验证检查 (强制)
- [ ] **核心功能** - 手动验证修改的功能正常工作
- [ ] **回归测试** - 确认现有功能未受影响
- [ ] **错误处理** - 验证异常情况得到正确处理
- [ ] **用户体验** - 确保交互流程顺畅

##### 🔴 开发服务器状态检查 (强制)
- [ ] **终端输出检查** - 如果 `npm run dev` 正在运行，必须检查终端输出
- [ ] **Bug检测** - 发现任何错误、警告或异常必须立即修复
- [ ] **编译状态** - 确保所有页面编译成功，无编译错误
- [ ] **运行时错误** - 检查控制台无运行时错误和未捕获异常
- [ ] **网络请求** - 验证API请求正常，无连接失败或超时

> **⚠️ 重要：在进行结束总结前，必须先解决所有发现的Bug和错误！**

##### 🔴 文档更新检查 (强制)
- [ ] **更新 changelog.md** - 记录本次变更内容和影响
- [ ] **代码注释** - 为复杂逻辑添加必要注释
- [ ] **类型定义** - 导出的组件和函数有完整的类型定义

#### 提交规范
```bash
# 提交信息格式
git commit -m "feat: 添加信号分析页面

- 实现BOS信号展示功能
- 添加信号筛选和搜索
- 支持响应式布局
- 修复表格排序问题

Closes #123"
```

## 🔄 持续改进

### 代码审查要点
1. **功能完整性** - 是否满足需求要求
2. **代码质量** - 是否遵循最佳实践
3. **性能考虑** - 是否有性能问题
4. **安全性** - 是否存在安全隐患
5. **可维护性** - 是否容易理解和维护

### Bug检测和修复指南

#### 🚨 常见Bug类型识别
```bash
# 1. 编译错误
✗ Type error: Property 'xxx' does not exist
✗ Module not found: Can't resolve 'xxx'
✗ Unexpected token 'xxx'

# 2. 运行时错误  
✗ TypeError: Cannot read properties of undefined
✗ ReferenceError: xxx is not defined
✗ TypeError: fetch failed

# 3. 网络请求错误
✗ Request timed out after 3000ms
✗ Client network socket disconnected
✗ TypeError: fetch failed

# 4. Next.js特定错误
✗ Failed to generate static paths
✗ Cannot find module for page
✗ Route used `params.xxx`. `params` should be awaited
```

#### 🔧 Bug修复优先级
1. **🔴 高优先级** - 阻止页面加载的错误
   - 编译失败
   - 模块找不到
   - 页面404错误

2. **🟡 中优先级** - 影响功能的错误
   - API请求失败
   - 组件渲染错误
   - 类型错误

3. **🟢 低优先级** - 不影响核心功能的警告
   - 控制台警告
   - 性能提示
   - 代码规范问题

#### 📋 Bug修复检查清单
- [ ] **识别错误类型** - 确定是编译、运行时还是网络错误
- [ ] **定位错误源** - 找到具体的文件和行号
- [ ] **分析错误原因** - 理解错误发生的根本原因
- [ ] **实施修复方案** - 应用最小化的修复方案
- [ ] **验证修复效果** - 确认错误已解决且无新问题
- [ ] **回归测试** - 确保修复未影响其他功能

### 重构指导原则
- **小步重构** - 每次只改动一个方面
- **保持测试** - 重构过程中保持功能不变
- **渐进改进** - 逐步提升代码质量
- **文档同步** - 重构后及时更新文档

### 技术债务管理
- **识别技术债** - 定期review代码中的技术债务
- **优先级排序** - 根据影响程度排序处理优先级
- **计划偿还** - 在功能开发中安排技术债偿还
- **预防为主** - 在开发中避免引入新的技术债务
