# 股票分析与交易系统 - 开发规范

## 🎯 项目概览

你是帮助用户开发Next.js股票分析与交易系统的AI助手。
- **技术栈**: Next.js 15, TypeScript, Tailwind CSS, Supabase
- **主要功能**: 股票信号分析、交易仪表板、用户管理
- **开发语言**: 中文

**⚠️ 强制规则：每次代码修改完成后，必须执行[完成后检查清单](#完成后强制检查清单)，违反此规则将被视为工作流程缺陷！**

**📋 详细规范：**
- [.cursor/rules/project_structure.mdc](mdc:.cursor/rules/project_structure.mdc) - 目录结构规范
- [.cursor/rules/backend_api.mdc](mdc:.cursor/rules/backend_api.mdc) - 后端API规范
- [.cursor/rules/development_workflow.mdc](mdc:.cursor/rules/development_workflow.mdc) - 开发工作流程规范
- [.cursor/rules/frontend_ui.mdc](mdc:.cursor/rules/frontend_ui.mdc) - 前端UI规范
- [.cursor/rules/database_schema.mdc](mdc:.cursor/rules/database_schema.mdc) - 数据库schema规范

### 核心用户规则
- **响应语言**: 始终使用中文回复
- **最小化修改**: 代码修改必须最小化，不允许增加不必要的方法
- **依赖管理**: 未经允许不得随意修改环境依赖

## 📁 项目结构规范

### 目录组织
```
src/
├── app/                     # Next.js App Router
│   ├── (main)/             # 主应用路由组
│   │   ├── dashboard/      # 仪表板页面
│   │   ├── signals/        # 信号分析页面  
│   │   └── analysis/       # 分析页面
│   ├── (external)/         # 外部页面
│   └── auth/               # 认证相关
├── components/             # 可复用组件
│   ├── ui/                # shadcn/ui 组件
│   └── data-table/        # 数据表格组件
├── lib/                   # 工具库
├── hooks/                 # React Hooks
├── config/               # 配置文件
└── navigation/           # 导航配置
```

## 🛠️ 开发工作流程

### 📋 任务开始前检查
- [ ] **需求理解** - 明确功能要求和验收标准
- [ ] **技术评估** - 确认实现方案和所需资源
- [ ] **环境检查** - 确保开发环境正常运行

### 🔄 开发过程规范
- [ ] **编码规范** - 遵循TypeScript和React最佳实践
- [ ] **组件设计** - 优先使用现有UI组件，必要时扩展
- [ ] **错误处理** - 实现完善的错误边界和异常处理
- [ ] **性能考虑** - 使用适当的优化策略(缓存、懒加载等)

### ✅ 完成后强制检查清单

#### 🔴 功能验证 (必须执行)
- [ ] **语法检查** - `npm run lint` 通过，无编译错误
- [ ] **项目启动检查** - `npm run dev` 成功启动，无运行时错误
- [ ] **功能测试** - 手动验证修改的功能正常工作
- [ ] **导入检查** - 确认所有导入语句正确，无循环依赖
- [ ] **错误处理** - 验证异常情况得到正确处理

#### 🔴 开发服务器状态检查 (必须执行)
- [ ] **终端输出检查** - 如果 `npm run dev` 正在运行，必须检查终端输出
- [ ] **Bug检测** - 发现任何错误、警告或异常必须立即修复
- [ ] **编译状态** - 确保所有页面编译成功，无编译错误
- [ ] **运行时错误** - 检查控制台无运行时错误和未捕获异常
- [ ] **网络请求** - 验证API请求正常，无连接失败或超时

> **⚠️ 重要：在进行结束总结前，必须先解决所有发现的Bug和错误！**

#### 🔴 兼容性检查 (必须执行)  
- [ ] **向后兼容** - 确认变更不会破坏现有功能
- [ ] **依赖检查** - 确认未引入未声明的依赖
- [ ] **环境变量** - 检查所需环境变量已正确配置

#### 🔴 文档更新 (必须执行)
- [ ] **更新 changelog.md** - 记录本次变更内容和影响
- [ ] **规则文档同步** - 如果修改了规则文件(.cursorrule或.cursor/rules/*)，必须更新changelog.md
- [ ] **代码注释** - 为复杂逻辑添加必要注释
- [ ] **类型定义** - 确保TypeScript类型定义完整
- [ ] **配置文件更新** - 如果涉及信号类型变更，检查并更新signals-config.ts
- [ ] **后端接口文档** - 如果新增或变更后端接口，更新backend_interfaces.mdc

## 🗄️ 数据库规范

### 核心表结构
- **signals** - 交易信号数据 (intraday/daily分类)
- **stock** - 股票基础信息
- **user_profiles** - 用户配置和权限
- **signal_queries** - 信号查询记录

### 环境变量
```env
SUPABASE_URL=your_supabase_url
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
```

## 🎨 UI/UX 规范

### 设计系统
- 使用 **shadcn/ui** 组件库
- 遵循 **Tailwind CSS** 设计原则
- 保持 **响应式设计** 和 **深色模式** 支持

### 组件使用原则
1. **优先使用现有组件** - 查看 `src/components/ui/` 
2. **保持一致性** - 遵循现有的设计模式
3. **性能优先** - 合理使用 React.memo 和 useMemo

## �� 扩展指南

### 添加新功能
1. **分析需求** - 明确功能边界和数据需求
2. **设计组件** - 规划组件结构和数据流
3. **编写代码** - 实现功能并添加错误处理
4. **测试验证** - 确保功能完整性和兼容性
5. **更新文档** - 记录变更和使用说明

### 常见任务参考
- **新增页面**: 在对应路由组下创建 `page.tsx`
- **新增API**: 使用 Supabase 客户端进行数据操作
- **新增组件**: 在 `components/` 下创建可复用组件

---

## 🚨 重要提醒

**每次代码修改完成后，必须逐项检查上述[完成后强制检查清单](#完成后强制检查清单)，这是保证代码质量的基本要求！**

**如有疑问或需要详细说明，请参考项目中的具体实现示例或提出具体问题。** 